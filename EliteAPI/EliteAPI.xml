<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EliteAPI</name>
    </assembly>
    <members>
        <member name="T:EliteAPI.Configuration.EliteDangerousApiConfiguration">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfiguration.#ctor(Microsoft.Extensions.Logging.ILogger{EliteAPI.Configuration.EliteDangerousApiConfiguration},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>Creates a new instance of <see cref="T:EliteAPI.Configuration.EliteDangerousApiConfiguration" /></summary>
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.JournalsPath">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.JournalPattern">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Configuration.EliteDangerousApiConfiguration.OptionsPath">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Configuration.EliteDangerousApiConfiguration.Apply">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.EliteDangerousApi">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Config">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Parser">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousApi.#ctor(System.IServiceProvider)">
            <summary>Creates a new instance of the EliteDangerousApi class.</summary>
        </member>
        <member name="M:EliteAPI.EliteDangerousApi.InitialiseAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousApi.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.EliteDangerousApi.StopAsync">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.EliteDangerousApi.Events">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Events.EventParser">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Events.EventParser.Converters">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.EventParser.Use``1">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.EventParser.ToJson``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.EventParser.ToPaths``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.EventParser.ToPaths(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.EventParser.FromJson``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.EventParser.FromJson(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.EventParser.ToProto``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.EventParser.FromProto``1(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Events.Events">
            <inheritdoc />
        </member>
        <member name="P:EliteAPI.Events.Events.EventTypes">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.On``1(EliteAPI.Abstractions.Events.EventDelegate{``0})">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.On``1(EliteAPI.Abstractions.Events.JsonDelegate)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.OnAny(EliteAPI.Abstractions.Events.EventDelegate{EliteAPI.Abstractions.Events.IEvent})">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.OnAny(EliteAPI.Abstractions.Events.JsonDelegate)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.Invoke``1(``0,EliteAPI.Abstractions.Events.EventContext)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.Invoke(System.String,EliteAPI.Abstractions.Events.EventContext)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.Register(System.Reflection.Assembly)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.Register``1">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.Register(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.Register">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.IsRegistered``1">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.Events.IsRegistered(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.LocalisedConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Events.LocalisedConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:EliteAPI.Extensions.EliteDangerousApiOptions">
            <summary>Options for a <see cref="T:EliteAPI.EliteDangerousApi" />.</summary>
        </member>
        <member name="M:EliteAPI.Readers.Reader.Register(EliteAPI.Abstractions.Readers.FileSelector)">
            <inheritdoc />
        </member>
        <member name="M:EliteAPI.Readers.Reader.FindNew">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EliteDangerousApiServiceCollectionExtensions.AddEliteApi(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>Adds EliteAPI services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EliteDangerousApiServiceCollectionExtensions.AddEliteApi(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EliteAPI.Extensions.EliteDangerousApiOptions})">
            <summary>Adds EliteAPI services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="configure">The <see cref="T:EliteAPI.Extensions.EliteDangerousApiOptions" /> configuration delegate.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
    </members>
</doc>
